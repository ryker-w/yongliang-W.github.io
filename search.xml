<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node Js百科</title>
    <url>/2021/01/13/Node-Js%E7%99%BE%E7%A7%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="nodejs一般指node-js"><a class="header-anchor" href="#nodejs一般指node-js">¶</a>nodejs一般指node.js</h3>
<p>本词条由<a href="https://baike.baidu.com/science">“科普中国”科学百科词条编写与应用工作项目</a> 审核 。</p>
<p>Node.js 是一个基于 Chrome V8 引擎的 <a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a> 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。 [1]</p>
<p>Node 是一个让 JavaScript 运行在<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316">服务端</a>的开发平台，它让 JavaScript 成为与<a href="https://baike.baidu.com/item/PHP/9337">PHP</a>、<a href="https://baike.baidu.com/item/Python/407313">Python</a>、<a href="https://baike.baidu.com/item/Perl/851577">Perl</a>、<a href="https://baike.baidu.com/item/Ruby/11419">Ruby</a> 等服务端语言平起平坐的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708">脚本语言</a>。 [2] 发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p>
<p>Node对一些特殊用例进行优化，提供替代的<a href="https://baike.baidu.com/item/API/10154">API</a>，使得V8在非浏览器环境下运行得更好。V8引擎执行Javascript的速度非常快，性能非常好。Node是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node 使用<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519">事件驱动</a>， 非阻塞<a href="https://baike.baidu.com/item/I%2FO/84718">I/O</a> 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>
<ul>
<li>
<p>中文名</p>
<p>node.js</p>
</li>
<li>
<p>外文名</p>
<p>Node</p>
</li>
<li>
<p>类  别</p>
<p>运行于服务端的JavaScript解释器</p>
</li>
<li>
<p>发布时间</p>
<p>2009年5月</p>
</li>
<li>
<p>开发者</p>
<p>Ryan Dahl</p>
</li>
<li>
<p>最新版本</p>
<p>13.9.0</p>
</li>
<li>
<p>更新时间</p>
<p>2020-02-25</p>
</li>
</ul>
<h2 id="目录"><a class="header-anchor" href="#目录">¶</a>目录</h2>
<ol>
<li>
<p>1 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#1">发展史</a></p>
</li>
<li>
<p>2 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#2">特性</a></p>
</li>
<li>
<p>3 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#3">模块</a></p>
</li>
<li>
<p>4 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#4">安装</a></p>
</li>
<li>
<p>▪ <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#4_1">Linux下安装Node</a></p>
</li>
<li>
<p>▪ <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#4_2">Windows下安装Node</a></p>
</li>
<li>
<p>5 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#5">集成开发环境</a></p>
</li>
<li>
<p>6 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#6">应用方向</a></p>
</li>
<li>
<p>7 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#7">示例程序</a></p>
</li>
<li>
<p>8 <a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#8">事务处理示例</a></p>
</li>
</ol>
<h2 id="发展史"><a class="header-anchor" href="#发展史">¶</a>发展史</h2>
<p>[编辑](javascript:😉</p>
<ul>
<li>2009年2月，Ryan Dahl在<a href="https://baike.baidu.com/item/%E5%8D%9A%E5%AE%A2/124">博客</a>上宣布准备基于V8创建一个轻量级的<a href="https://baike.baidu.com/item/Web%E6%9C%8D%E5%8A%A1%E5%99%A8">Web服务器</a>并提供一套库。</li>
<li>2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node包，随后几个月里，有人开始使用Node开发应用。</li>
<li>2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。</li>
<li>2010年年底，Node获得<a href="https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97">云计算</a>服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node的发展。</li>
<li>2011年7月，Node在微软的支持下发布<a href="https://baike.baidu.com/item/Windows">Windows</a>版本。</li>
</ul>
<h2 id="特性"><a class="header-anchor" href="#特性">¶</a>特性</h2>
<p>[编辑](javascript:😉</p>
<p>V8引擎本身使用了一些最新的编译技术。这使得用Javascript这类<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>编写出来的代码运行速度获得了极大提升，又节省了开发成本。对性能的苛求是Node的一个关键因素。 Javascript是一个<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8">事件驱动</a>语言，Node利用了这个优点，编写出可扩展性高的服务器。Node采用了一个称为“事件循环(event loop）”的架构，使得编写可扩展性高的服务器变得既容易又安全。提高服务器性能的技巧有多种多样。Node选择了一种既能提高性能，又能减低开发复杂度的架构。这是一个非常重要的特性。并发编程通常很复杂且布满地雷。Node绕过了这些，但仍提供很好的性能。</p>
<p>Node采用一系列“非阻塞”库来支持事件循环的方式。本质上就是为文件系统、数据库之类的资源提供接口。向文件系统发送一个请求时，无需等待硬盘（<a href="https://baike.baidu.com/item/%E5%AF%BB%E5%9D%80">寻址</a>并检索文件），硬盘准备好的时候非阻塞接口会通知Node。该模型以可扩展的方式简化了对慢资源的访问， 直观，易懂。尤其是对于熟悉<a href="https://baike.baidu.com/item/onmouseover">onmouseover</a>、onclick等<a href="https://baike.baidu.com/item/DOM/50288">DOM</a>事件的用户，更有一种似曾相识的感觉。</p>
<p>虽然让Javascript运行于服务器端不是Node的独特之处，但却是其一强大功能。不得不承认，浏览器环境限制了我们选择编程语言的自由。任何服务器与日益复杂的浏览器客户端应用程序间共享代码的愿望只能通过Javascript来实现。虽然还存在其他一些支持Javascript在服务器端 运行的平台，但因为上述特性，Node发展迅猛，成为事实上的平台。</p>
<p>在Node启动的很短时间内，社区就已经贡献了大量的扩展库（模块）。其中很多是连接数据库或是其他软件的驱动，但还有很多是凭他们的实力制作出来的非常有用的软件。</p>
<p>最后，不得不提到的是Node社区。虽然Node项目还非常年轻，但很少看到对一个项目如此狂热的社区。不管是新手，还是专家，大家都围绕着项目，使用并贡献自己的能力，致力于打造一个探索、支持、分享、听取建议的乐土。</p>
<p><strong>Node的优点</strong></p>
<p>Node作为一个新兴的前端框架，后台语言，有很多吸引人的地方：</p>
<p>RESTful API</p>
<p>单线程</p>
<p>Node可以在不新增额外线程的情况下，依然可以对任务进行并发处理 —— Node.js是单线程的。它通过事件循环（event loop）来实现并发操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。</p>
<p>非阻塞IO</p>
<p>V8虚拟机</p>
<p>事件驱动</p>
<h2 id="模块"><a class="header-anchor" href="#模块">¶</a>模块</h2>
<p>[编辑](javascript:😉</p>
<p>Node使用Module模块去划分不同的功能，以简化应用的开发。Modules模块有点像C++语言中的类库。每一个Node的类库都包含了十分丰富的各类函数，比如http模块就包含了和http功能相关的很多函数，可以帮助开发者很容易地对比如http,tcp/udp等进行操作，还可以很容易的创建http和tcp/udp的服务器。</p>
<p>要在程序中使用模块是十分方便的，只需要如下：</p>
<p>在这里，引入了http类库，并且对http类库的引用存放在http变量中了。这个时候，Node会在我们应用中搜索是否存在node_modules的目录，并且搜索这个目录中是否存在http的模块。如果Node.js找不到这个目录，则会到全局模块缓存中去寻找，用户可以通过相对或者绝对路径，指定模块的位置，比如：</p>
<p>var myModule = require(‘./myModule.js’);</p>
<p>模块中包含了很多功能代码片断，在模块中的代码大部分都是私有的，意思是在模块中定义的函数方法和变量，都只能在同一个模块中被调用。当然，可以将某些方法和变量暴露到模块外，这个时候可以使用exports对象去实现。</p>
<h2 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h2>
<p>[编辑](javascript:😉</p>
<h3 id="Linux下安装Node"><a class="header-anchor" href="#Linux下安装Node">¶</a>Linux下安装Node</h3>
<p>下面介绍下Node的安装，首先在nodejs的网站上根据操作系统下载相关的安装包，对于Ubuntu(linux)下的安装，可以如下进行：</p>
<p>sudo apt-get update</p>
<p>sudo apt-get install node</p>
<p>或者：</p>
<p>sudo apt update</p>
<p>sudo apt install node</p>
<h3 id="Windows下安装Node"><a class="header-anchor" href="#Windows下安装Node">¶</a>Windows下安装Node</h3>
<p>官网现已提供安装包（最新的长期支持版本: <strong>10.16.0</strong>）、编译器和相应的API 文档（English）。 [1]</p>
<h2 id="集成开发环境"><a class="header-anchor" href="#集成开发环境">¶</a>集成开发环境</h2>
<p>[编辑](javascript:😉</p>
<p>具备书写JavaScript的IDE均可。普通的记事本也可以进行开发。</p>
<h2 id="应用方向"><a class="header-anchor" href="#应用方向">¶</a>应用方向</h2>
<p>[编辑](javascript:😉</p>
<p>在几年的时间里，Node.JS逐渐发展成一个成熟的开发平台，吸引了许多开发者。有许多大型高流量网站都采用Node.JS进行开发，此外，开发人员还可以使用它来开发一些快速移动<a href="https://baike.baidu.com/item/Web/150564">Web</a>框架。</p>
<p>除了Web应用外，NodeJS也被应用在许多方面，本文盘点了NodeJS在其它方面所开发的十大令人神奇的项目，这些项目涉及到应用程序监控、媒体流、远程控制、桌面和移动应用等等。</p>
<h2 id="示例程序"><a class="header-anchor" href="#示例程序">¶</a>示例程序</h2>
<p>[编辑](javascript:😉</p>
<p>任何一套标准都由一个著名的程序开始：Hello World ！在Node中，Http是首要的。Node为创建http服务器做了优化，所以你在网上看到的大部分示例和库都是集中在web上(http框架、模板库等）。以下做了一个nodejs的Hello World 演示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var&#96; &#96;http &#x3D; require(&#96;&#96;&#39;http&#39;&#96;&#96;);&#96;&#96;server &#x3D; http.createServer(&#96;&#96;function&#96; &#96;(req, res) &#123;&#96;&#96;res.writeHeader(200, &#123;&#96;&#96;&quot;Content-Type&quot;&#96;&#96;: &#96;&#96;&quot;text&#x2F;plain&quot;&#96;&#96;&#125;);&#96;&#96;res.end(&#96;&#96;&quot;Hello World\n&quot;&#96;&#96;);&#96;&#96;&#125;);&#96;&#96;server.listen(8000);&#96;&#96;console.log(&#96;&#96;&quot;httpd start @8000&quot;&#96;&#96;);</span><br></pre></td></tr></table></figure>
<h2 id="事务处理示例"><a class="header-anchor" href="#事务处理示例">¶</a>事务处理示例</h2>
<p>[编辑](javascript:😉</p>
<p>本示例意图向读者传递 Node.js 关于 HTTP 处理过程的详实概念。在不考虑编程语言和环境的情况下，我们假设您已经知晓通常情况下 HTTP 请求是如何工作的，并且对 Node.js 的 EventEmitters 和 Streams 也已知晓。如果您对他们并不熟悉，通过 API 文档可以快速查阅。</p>
<p>创建服务</p>
<p>Node 的网络应用都需要先创建一个网络服务对象，这里我们通过 createServer 来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#96;&#96;&#39;http&#39;&#96;&#96;);&#96;&#96;var server &#x3D; http.createServer(function(request, response) &#123;  &#96;&#96;&#x2F;&#x2F; handle your request&#96;&#96;&#125;);</span><br></pre></td></tr></table></figure>
<p>传入 createServer 的 function 在每次 HTTP 请求时都将被调用执行，因此这个 function 也被称为请求的处理者。事实上通过 createServer 返回的 Server 对象是一个 EventEmitter，我们需要做的仅仅是在这里保存这个 server 对象，并在之后对其添加监听器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#96;&#96;&#39;http&#39;&#96;&#96;);&#96;&#96;var server &#x3D; http.createServer(); &#96;&#96;server.on(&#96;&#96;&#39;request&#39;&#96;&#96;, function(request, response) &#123;&#96;&#96;&#x2F;&#x2F; handle your request&#96;&#96;&#125;);</span><br></pre></td></tr></table></figure>
<p>当 HTTP 请求这个服务时，node 调用请求处理者 function 并传入一些用于处理事务相关的对象：request 和 response。我们可以非常方便的获得这两个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#96;&#96;&#39;http&#39;&#96;&#96;);&#96;&#96;var server &#x3D; http.createServer(); &#96;&#96;server.on(&#96;&#96;&#39;request&#39;&#96;&#96;, function(request, response) &#123;&#96;&#96;&#x2F;&#x2F; handle your request&#96;&#96;&#125;).listen(8080); </span><br></pre></td></tr></table></figure>
<p>为了对实际的请求提供服务，在 server 对象上需要调用 listen 方法。绝大多数情况你需要传入 listen 你想要服务监听的端口号，这里也存在很多其他的可选方案，参见 API reference。</p>
<ul>
<li>
<p>参考资料</p>
<p>1.<a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#ref_%5B1%5D_3974030"> </a><a href="https://baike.baidu.com/reference/7567977/cec36_cETFczOGaXsj7XUlpROaU9d3hSNxtLl-V_7g6m7h6X8pPicCm5Cqkwyg">Node.js中文网 </a> ．Node.js中文网[引用日期2019-06-08]</p>
<p>2.<a href="https://baike.baidu.com/item/node.js/7567977?fromtitle=nodejs&amp;fromid=11244313&amp;fr=aladdin#ref_%5B2%5D_3974030"> </a><a href="https://baike.baidu.com/reference/7567977/86b51H3SpmdRm7zFFbUd-6RtiUYsxOodPk5vK6jSScA3xrjtcGXTJnta0X7OiuLFEVGOJlQZL789toGKMlADxd1eqSIscD9T_Lkf8LilE9yr-KfynEdmzlug">Node.js开发实战详解 </a> ．清华大学出版社．2012-5-5[引用日期2018-08-21]</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序猿手册</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>js</tag>
        <tag>技术介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序wx:for和wx:if的用法</title>
    <url>/2021/01/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwx-for%E5%92%8Cwx-if%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="wx-for"><a class="header-anchor" href="#wx-for">¶</a>wx:for</h3>
<p>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</p>
<p>默认数组的当前项的下标变量名默认为 <code>index</code>，数组当前项的变量名默认为 <code>item</code></p>
<p><img src="https://pic2.zhimg.com/80/v2-ef7a1052d4a3898cfcc4a998a0388fe9_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-a1b36aa6901176af58eea9266005acbc_720w.jpg" alt="img"></p>
<p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，</p>
<p>使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名：</p>
<p><img src="https://pic4.zhimg.com/80/v2-a9c3d39b018fc3870005f5f904fa2b1b_720w.png" alt="img"></p>
<p><code>wx:for</code>也可以嵌套，下边是一个九九乘法表</p>
<p><img src="https://pic2.zhimg.com/80/v2-befc1e6885c58197c7d60a8e9c7741ad_720w.jpg" alt="img"></p>
<h3 id="block-wx-for"><a class="header-anchor" href="#block-wx-for">¶</a>block wx:for</h3>
<p>类似 <code>block wx:if</code>，也可以将 <code>wx:for</code> 用在<code>&lt;block/&gt;</code>标签上，以渲染一个包含多节点的结构块。例如：</p>
<p><img src="https://pic3.zhimg.com/80/v2-272e0f963a41ec7bdef7825fdf732aee_720w.jpg" alt="img"></p>
<h3 id="wx-key"><a class="header-anchor" href="#wx-key">¶</a>wx:key</h3>
<p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <a href="https://link.zhihu.com/?target=https%3A//developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 中的输入内容，<a href="https://link.zhihu.com/?target=https%3A//developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch</a> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p>
<p><code>wx:key</code> 的值以两种形式提供</p>
<ol>
<li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li>
<li>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：</li>
</ol>
<p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p>
<p><strong>如不提供</strong> <strong><code>wx:key</code>，会报一个</strong> <strong><code>warning</code>， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</strong></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">switch</span> wx:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;objectArray&#125;&#125;&quot;</span> wx:key=<span class="string">&quot;unique&quot;</span> style=<span class="string">&quot;display: block;&quot;</span>&gt; &#123;&#123;item.id&#125;&#125; &lt;/<span class="keyword">switch</span>&gt;</span><br><span class="line">&lt;button bindtap=<span class="string">&quot;switch&quot;</span>&gt; Switch &lt;/button&gt;</span><br><span class="line">&lt;button bindtap=<span class="string">&quot;addToFront&quot;</span>&gt; Add to the front &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">switch</span> wx:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;numberArray&#125;&#125;&quot;</span> wx:key=<span class="string">&quot;*this&quot;</span> style=<span class="string">&quot;display: block;&quot;</span>&gt; &#123;&#123;item&#125;&#125; &lt;/<span class="keyword">switch</span>&gt;</span><br><span class="line">&lt;button bindtap=<span class="string">&quot;addNumberToFront&quot;</span>&gt; Add to the front &lt;/button&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    objectArray: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_5&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_4&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_3&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_2&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_1&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_0&#x27;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    numberArray: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">switch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="built_in">this</span>.data.objectArray.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * length)</span><br><span class="line">      <span class="keyword">const</span> y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * length)</span><br><span class="line">      <span class="keyword">const</span> temp = <span class="built_in">this</span>.data.objectArray[x]</span><br><span class="line">      <span class="built_in">this</span>.data.objectArray[x] = <span class="built_in">this</span>.data.objectArray[y]</span><br><span class="line">      <span class="built_in">this</span>.data.objectArray[y] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="built_in">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addToFront: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="built_in">this</span>.data.objectArray.length</span><br><span class="line">    <span class="built_in">this</span>.data.objectArray = [&#123;<span class="attr">id</span>: length, <span class="attr">unique</span>: <span class="string">&#x27;unique_&#x27;</span> + length&#125;].concat(<span class="built_in">this</span>.data.objectArray)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="built_in">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addNumberToFront: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data.numberArray = [ <span class="built_in">this</span>.data.numberArray.length + <span class="number">1</span> ].concat(<span class="built_in">this</span>.data.numberArray)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      numberArray: <span class="built_in">this</span>.data.numberArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>当 <code>wx:for</code> 的值为字符串时，会将字符串解析成字符串数组</p>
<p><img src="https://pic3.zhimg.com/80/v2-55edffd79861eac5f44f6339a541fb9e_720w.jpg" alt="img"></p>
<p>等同于</p>
<p><img src="https://pic4.zhimg.com/80/v2-25968c8c3f62dc47e7387974ef007f2b_720w.png" alt="img"></p>
<p>**注意：**花括号和引号之间如果有空格，将最终被解析成为字符串</p>
<p><img src="https://pic1.zhimg.com/80/v2-5c970662b70c5fdb5fc21460fe3c5b3c_720w.jpg" alt="img"></p>
<p>等同于</p>
<p><img src="https://pic3.zhimg.com/80/v2-8c00ff68efc75b5491510afd6887afbe_720w.jpg" alt="img"></p>
<h3 id="wx-if"><a class="header-anchor" href="#wx-if">¶</a>wx:if</h3>
<p>在框架中，使用 <code>wx:if=&quot;&quot;</code> 来判断是否需要渲染该代码块：</p>
<p><img src="https://pic2.zhimg.com/80/v2-d4c22d78c014d954232b3366857aa50d_720w.png" alt="img"></p>
<p>也可以用<code>wx:elif</code>和<code>wx:else</code>来添加一个 else 块：</p>
<p><img src="https://pic1.zhimg.com/80/v2-a297f03eb4f8b4d951c25dd387ea9e58_720w.png" alt="img"></p>
<h3 id="block-wx-if"><a class="header-anchor" href="#block-wx-if">¶</a>block wx:if</h3>
<p>因为 <code>wx:if</code> 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 <code>&lt;block/&gt;</code> 标签将多个组件包装起来，并在上边使用 <code>wx:if</code> 控制属性。</p>
<p><img src="https://pic4.zhimg.com/80/v2-c756a6f23a781bb522a2b8375496241f_720w.jpg" alt="img"></p>
<p><strong>注意：</strong> <code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p>
<h3 id="wx-if-vs-hidden"><a class="header-anchor" href="#wx-if-vs-hidden">¶</a><code>wx:if</code> vs <code>hidden</code></h3>
<p>因为 <code>wx:if</code> 之中的模板也可能包含数据绑定，所以当 <code>wx:if</code> 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。</p>
<p>同时 <code>wx:if</code> 也是<strong>惰性的</strong>，如果在初始渲染条件为 <code>false</code>，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。</p>
<p>相比之下，<code>hidden</code> 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。</p>
<p>一般来说，<code>wx:if</code> 有更高的切换消耗而 <code>hidden</code> 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 <code>hidden</code> 更好，如果在运行时条件不大可能改变则 <code>wx:if</code> 较好。</p>
]]></content>
      <categories>
        <category>Afo</category>
      </categories>
      <tags>
        <tag>技术文章</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>世界</title>
    <url>/2021/01/06/%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="#anchor">Link to Anchor</a></p>
<p>sss</p>
<p>s</p>
<p>s</p>
<p>s</p>
<p>s</p>
<p><a id="anchor"></a> Anchor</p>
]]></content>
      <categories>
        <category>Afo</category>
      </categories>
      <tags>
        <tag>世界</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>苍山洱海</title>
    <url>/2021/01/05/%E8%8B%8D%E5%B1%B1%E6%B4%B1%E6%B5%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🐬</p>
<p>等下一个轮回，我愿做苍山，你便化作洱海，你在我的怀里环绕，你在我的心里流淌，我，就这样抱着你，在孤独的幸福中老去。——南溟</p>
<p>🐬🐬</p>
<p>苍山雪，洱海月，洱海月照苍山雪。</p>
<p>🐬🐬🐬</p>
<p>“是不是对生活不太满意，很久没有笑过又不知为何，既然不快乐又不喜欢这里，不如一路向西，去大理。”——郝云《去大理》开头是不是便触碰到了心灵，总是简单的道理被复杂的生活掩盖，渐渐听不见内心的声音。总是为了梦想忘记了“父母在，不远游”的古言，放弃了宁静的心灵和身体，把自己置身压力复杂之中，在奔波那么久以后，我们，到底要的是什么？</p>
<p>🐬🐬🐬🐬</p>
<p>水光万顷开天镜，山色四时环翠屏。</p>
<p>🐬🐬🐬🐬🐬</p>
<p>青山绿水见纵马高歌云淡风轻，天高海蓝苍山如屏叠翠，洱海如镜如琴依旧弹奏着那一曲《高山流水，寺古松森。渔船古松古街古城纵马高歌在千年不变的如画风景里身置仙境心止于此夫复何求</p>
<p>🐬🐬🐬🐬🐬🐬</p>
<p>野云万里无城郭，雨雪纷纷连大漠，胡雁哀鸣夜夜飞，胡儿眼泪双双落。——李颀</p>
<p>🐬🐬🐬🐬🐬🐬🐬</p>
<p>建议住可以晒到太阳的那边，早上被太阳晒醒的感觉很棒。</p>
<p>🐬🐬🐬🐬🐬🐬🐬</p>
<p>从大理古城去机场，坐公交车非常麻烦，一般都是打车，最好是早点贴个纸条，拼车。从古城到机场</p>
<p>🐬🐬🐬🐬🐬🐬</p>
<p>让我们在洱海旁唱情歌到天明——喜儿</p>
<p>🐬🐬🐬🐬🐬</p>
<p>孕育了高原明珠——洱海。</p>
<p>🐬🐬🐬🐬</p>
<p>茶马古道那悠悠的——铃声……</p>
<p>🐬🐬</p>
<p>苍山雪，洱海月，洱海月照苍山雪。</p>
<p>🐬</p>
<p>大理的洱海形如人耳，风平浪静时，像一颗深绿色的宝石镶嵌在云南大地上，微风吹过，海面上金光闪闪，泛起一道道美丽的浪花，妩媚动人，让我感受到了大自然的神奇。</p>
]]></content>
      <categories>
        <category>山美水美</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>苍山洱海</tag>
        <tag>大理</tag>
        <tag>雪</tag>
        <tag>月</tag>
      </tags>
  </entry>
  <entry>
    <title>阿佛么么哒</title>
    <url>/2021/01/05/%E9%98%BF%E5%BC%A5%E9%99%80%E4%BD%9B%E4%B9%88%E4%B9%88%E5%93%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="🍷-请相信，这个世界上真的有人在过着你想要的生活，愿你我既可以朝九晚五，又能够浪迹天涯。"><a class="header-anchor" href="#🍷-请相信，这个世界上真的有人在过着你想要的生活，愿你我既可以朝九晚五，又能够浪迹天涯。">¶</a>🍷 请相信，这个世界上真的有人在过着你想要的生活，愿你我既可以朝九晚五，又能够浪迹天涯。</h3>
<blockquote>
<ol>
<li>
<p><strong>所谓朋友，不过是我在路上走着，遇到了你，大家点头微笑，结伴一程。</strong></p>
</li>
<li>
<p><strong>缘深缘浅，缘聚缘散，该分手时分手，该重逢时重逢。</strong><br>
<strong>惜缘即可，不必攀缘。</strong></p>
</li>
<li>
<p><strong>当一个人的内心充满了什么，感受到了什么，他所看到的就会是什么。</strong></p>
</li>
<li>
<p><strong>人生是一场不断校正方向的旅行，有人找到的方向是事业，有人找到的是信仰，有人找到的是爱······我们可以旅行，但不能没有方向。</strong></p>
</li>
<li>
<p><strong>世界很大，有故事的人很多。 每个有故事的人都有一个共性： 他们有生活。</strong></p>
</li>
<li>
<p><strong>缘深缘浅，缘聚缘散，惜缘随缘莫攀缘。</strong></p>
</li>
<li>
<p><strong>诗难果腹养心肺，酒不解渴润平生。</strong></p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Afo</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>缘</tag>
      </tags>
  </entry>
  <entry>
    <title>落幕无悔</title>
    <url>/2021/01/05/%E8%90%BD%E5%B9%95%E6%97%A0%E6%82%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>❤️ 落幕无悔，安之于心❤️</h1>
<h2 id="🏃-不管结果如何"><a class="header-anchor" href="#🏃-不管结果如何">¶</a>🏃 不管结果如何</h2>
<p>无法逃避的就是自我，无法挽回的就是过去。觉人之诈，不愤于言；受人之侮，不动于色；察人之过，不扬于他；施人之惠，不记于心；受人之恩，铭记于心；受人之鱼，而学之渔；识人之才，授之于权；善于谋人，有容乃大。</p>
<h2 id="🌞-不问前途凶吉"><a class="header-anchor" href="#🌞-不问前途凶吉">¶</a>🌞 不问前途凶吉</h2>
<p>所见所闻改变一生，不知不觉会断送一生。没有目标的人永远为有目标的人去努力。变外生变是最大的危机，满足现状是最大的陷讲。下对注，赢一次；跟对人，赢一世。老板只能给你一个位置，不能给你一个未来，舞台再大，人走茶凉。</p>
<h2 id="🚀-莫畏前程艰险"><a class="header-anchor" href="#🚀-莫畏前程艰险">¶</a>🚀 莫畏前程艰险</h2>
<p>承认自己的伟大，就是认同自己的愚疑。越是假正经，越爱装真性情。当人心变成市场，市场变成赌场，那必会死伤惨重。我从来没奢求过谁能明白我的心情，因为我的经历是空前绝后的，别人不是我，不知道我多痛过。</p>
<h4 id="🐑-勇者愤怒-抽刃向更强者-怯者愤怒-却抽刃向更弱者。"><a class="header-anchor" href="#🐑-勇者愤怒-抽刃向更强者-怯者愤怒-却抽刃向更弱者。">¶</a>🐑 勇者愤怒,抽刃向更强者;怯者愤怒,却抽刃向更弱者。</h4>
<p>我一向不愿穿戴昂贵的服饰，不愿拥有名牌，因为深感自己没有那样名贵;我一向不喜出入西装革履、衣香鬓影的场合，因为深感自己没有那样高级。我要谦虚卑微一如山上的一株野草，自在地生活于大地，但也有高贵的自尊，俯视这红尘大地。</p>
<h4 id="☘️-你有没有这样的感觉"><a class="header-anchor" href="#☘️-你有没有这样的感觉">¶</a>☘️ 你有没有这样的感觉</h4>
<p>坐在一列火车上，沿途跟着一条河，你看着它在晨光暮霭中变换着色彩 ，看着它洗涤一缕缕 阳光，看着它映衬一片片星辉，看着它或是汹涌或是平静，然而一直相随，不离不弃。</p>
]]></content>
      <categories>
        <category>Quotations</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
